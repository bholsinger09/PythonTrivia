name: Python Trivia Game CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest (Unit Tests)
      run: |
        pytest tests/test_models.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Start Flask app for integration tests
      run: |
        python app.py &
        sleep 5
      env:
        FLASK_ENV: testing
        
    - name: Test API endpoints
      run: |
        pytest tests/test_api_endpoints.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Install Chrome for Selenium tests
      uses: browser-actions/setup-chrome@latest
      
    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@master
      
    - name: Run Selenium tests
      run: |
        export HEADLESS=true
        pytest tests/test_home_page.py tests/test_game_functionality.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}
        HEADLESS: true
        
    - name: Generate test report
      run: |
        pytest --html=reports/test-report.html --self-contained-html
      env:
        PYTHONPATH: ${{ github.workspace }}
        HEADLESS: true
      if: always()
      
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.python-version }}
        path: reports/
      if: always()

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt
        bandit -r . -x tests/,venv/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json
      if: always()

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t python-trivia:latest .
        
    - name: Test Docker image
      run: |
        docker run -d -p 5001:5001 --name trivia-test python-trivia:latest
        sleep 10
        curl -f http://localhost:5001/ || exit 1
        docker stop trivia-test
        docker rm trivia-test
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      
    - name: Push to Docker Hub
      run: |
        docker tag python-trivia:latest ${{ secrets.DOCKER_USERNAME }}/python-trivia:latest
        docker tag python-trivia:latest ${{ secrets.DOCKER_USERNAME }}/python-trivia:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/python-trivia:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/python-trivia:${{ github.sha }}
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
      if: github.event_name == 'push'
      
    - name: Deployment success notification
      run: |
        echo "üéâ Deployment successful!"
        echo "üåê App URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"